/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;

import Logica.Cliente;
import Logica.DetalleFactura;
import Logica.RHabitacion;
import Persistencia.exceptions.NonexistentEntityException;
import com.itextpdf.text.DocumentException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Facu
 */
public class Facturador extends javax.swing.JInternalFrame {

    ControladoraVisual unaControladoraVisual = null;
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultComboBoxModel comboTipo = new DefaultComboBoxModel();
    DefaultComboBoxModel comboDNI = new DefaultComboBoxModel();
    
    /**
     * Creates new form Facturador
     */
    
    public Facturador(ControladoraVisual unaControladora) {
        initComponents();
        unaControladoraVisual = unaControladora;
        modelo.addColumn("Reserva Habitacion");
        modelo.addColumn("cantidad");
        modelo.addColumn("Subtotal");
        cargarComboTipo();
        cargarComboCliente();
    }
    
    public void cargarComboTipo(){
        comboTipo.addElement("A");
        comboTipo.addElement("B");
        comboTipo.addElement("X");
        cmbTipo.setModel(comboTipo);
    }
    
    public void cargarComboCliente(){
        
        List<Cliente> misClientes = unaControladoraVisual.mostrarClientes();
        
        for (Cliente unCliente : misClientes) {
            comboDNI.addElement(unCliente.getDni());
        }
        
        cmbDNI.setModel(comboDNI);
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbDNI = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnFacturar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("FACTURAS");

        jLabel2.setText("Tipo:");

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("DNI:");

        cmbDNI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDNIActionPerformed(evt);
            }
        });

        jLabel4.setText("Cliente:");

        lblCliente.setText("xxx");

        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reserva Habitacion", "Cantidad", "Precio"
            }
        ));
        jScrollPane1.setViewportView(tblDetalle);

        jLabel5.setText("Total:");

        lblTotal.setText("xxx");

        btnFacturar.setText("Facturar");
        btnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturarActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 897, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCliente)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(448, 448, 448))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnFacturar)
                        .addGap(40, 40, 40)
                        .addComponent(btnImprimir)
                        .addGap(193, 193, 193)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cmbDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lblCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblTotal)
                    .addComponent(btnFacturar)
                    .addComponent(btnImprimir))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        String tipo = cmbTipo.getSelectedItem().toString();
        String cliente = lblCliente.getText();
        Double total = Double.parseDouble(lblTotal.getText());

        List <DetalleFactura> unosDetalles;
        unosDetalles = new LinkedList();

        int filas = tblDetalle.getRowCount();
        
        if(filas != 0){
            
           for (int i = 0; i < filas; i++) {

            String descripcion = tblDetalle.getValueAt(i, 0).toString();
            int cantidad = Integer.parseInt(tblDetalle.getValueAt(i, 1).toString());
            Double subtotal = Double.parseDouble(tblDetalle.getValueAt(i, 2).toString());

            DetalleFactura unDetalleFactura = new DetalleFactura(descripcion, cantidad, subtotal);

            unosDetalles.add(unDetalleFactura);

        }

                try {
                    unaControladoraVisual.imprimirFactura(tipo, cliente, total, unosDetalles);
                } catch (DocumentException ex) {
                    Logger.getLogger(Facturador.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Facturador.class.getName()).log(Level.SEVERE, null, ex);
                } 
            
        }
        else{
            JOptionPane.showMessageDialog(null, "NO HAY RESERVAS PARA IMPRIMIR");
        }

        

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturarActionPerformed
        String tipo = cmbTipo.getSelectedItem().toString();
        Double total = Double.parseDouble(lblTotal.getText());
        
        int dni = Integer.parseInt(cmbDNI.getSelectedItem().toString());
        Cliente unCliente = unaControladoraVisual.DameElCliente(dni);
        
        List <DetalleFactura> unosDetalles = new LinkedList();
        
        int filas = tblDetalle.getRowCount();
        
        if(filas != 0){
            for (int i = 0; i < filas; i++) {
            
            
            String descripcion = tblDetalle.getValueAt(i, 0).toString();
            int cantidad = Integer.parseInt(tblDetalle.getValueAt(i, 1).toString());
            Double subtotal = Double.parseDouble(tblDetalle.getValueAt(i, 2).toString());
            
            DetalleFactura unDetalleFactura = new DetalleFactura(descripcion, cantidad, subtotal);
           
            unosDetalles.add(unDetalleFactura);
            
        }
        
            try {
            unaControladoraVisual.altaFactura(tipo, total, unCliente, unosDetalles);
            } catch (Exception ex) {
            Logger.getLogger(Facturador.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            try {
                unaControladoraVisual.borrarReservas(dni);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(Facturador.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            modelo = (DefaultTableModel) tblDetalle.getModel();

            for (int i = 0; i < filas; i++) {    ////RECORRO EL INDICE A TRAVES DE UN CICLO FOR

                modelo.removeRow(0);   /////DE ESTA MANERA VOY QUITANDO EL SIEMPRE LA PRIMER FILA DEL MODELO...ESTO UNA VEZ FINALIZADO EL RECORRIDO DEL FOR NOS 								     ELIMINA TODOS LOS ELEMENTOS DE LA TABLA

            }
            
            tblDetalle.setModel(modelo);
            
        }
        else{
            JOptionPane.showMessageDialog(null, "NO HAY RESERVAS DE ESTE CLIENTE");
        }
        
        
        
    }//GEN-LAST:event_btnFacturarActionPerformed

    private void cmbDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDNIActionPerformed
        Double total = 0.0;    
        
            modelo = (DefaultTableModel) tblDetalle.getModel();

            int filas = tblDetalle.getRowCount(); ///GENERO UN INDICE PARA SABER CUANTAS FILAS TIENE MI TABLA

            for (int i = 0; i < filas; i++) {    ////RECORRO EL INDICE A TRAVES DE UN CICLO FOR

                modelo.removeRow(0);   /////DE ESTA MANERA VOY QUITANDO EL SIEMPRE LA PRIMER FILA DEL MODELO...ESTO UNA VEZ FINALIZADO EL RECORRIDO DEL FOR NOS 								     ELIMINA TODOS LOS ELEMENTOS DE LA TABLA

            }
        
        int dni = Integer.parseInt(cmbDNI.getSelectedItem().toString());
        
        Cliente unCliente = unaControladoraVisual.DameElCliente(dni);
        
        lblCliente.setText(unCliente.getNombre() + " "+unCliente.getApellido());
        
        List<RHabitacion> lista = unaControladoraVisual.filtrarReservas(dni);
        
            Object[] fila = new Object[3];   ///GENERO UN VECTOR DE TIPO OBJECT DADO QUE EN EL VOY A CARGAR DISTINTOS TIPOS DE DATOS

            for (RHabitacion unaRHabitacion : lista) { ///RECORRO LA LISTA UTILIZANDO UN FOR EACH
                
                ////AQUI LE ASIGNO A CADA ELEMENTO DE UN VECTOR LOS DATOS QUE QUIERO QUE SE MUESTREN
                fila[0] = unaRHabitacion.getUnaHabitacion().getId();
                fila[1] = unaRHabitacion.getCantidad();
                int dias = unaControladoraVisual.calcularDias(unaRHabitacion.getFechaEntrada(), unaRHabitacion.getFechaSalida());
                fila[2] = unaRHabitacion.getUnaHabitacion().getMontoPorNoche() * unaRHabitacion.getCantidad() * dias;
                
                modelo.addRow(fila);  ////AGREGO A MI MODELO UNA FILA (ES IMPORTANTE SABER QUE CADA VECTOR ES UNA FILA DA LA TABLA)
                
            }
            
            tblDetalle.setModel(modelo);
        
        int f = tblDetalle.getRowCount();
        
        for (int i = 0; i < f; i++) {
            total = total + Double.parseDouble(tblDetalle.getValueAt(i, 2).toString());
        }

        lblTotal.setText(String.valueOf(total));
        
    }//GEN-LAST:event_cmbDNIActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFacturar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox<String> cmbDNI;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblDetalle;
    // End of variables declaration//GEN-END:variables
}
