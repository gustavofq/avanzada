/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;

import Logica.Habitacion;
import Logica.Tipo;
import Persistencia.exceptions.NonexistentEntityException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Facundo
 */
public class ABMHabitacion extends javax.swing.JInternalFrame {
    
    ControladoraVisual unaControladoraVisual = null;
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultComboBoxModel comboTipo = new DefaultComboBoxModel();
    Verificador unVerificador = new Verificador();

    /**
     * Creates new form ABMHabitacion
     */
    public ABMHabitacion(ControladoraVisual unaControladora) {
        initComponents();
        unaControladoraVisual = unaControladora;
        modelo.addColumn("Número");
       // modelo.addColumn("Estado");
        modelo.addColumn("Monto por Noche");
        modelo.addColumn("Tipo");
        cargarComboTipo();
        cargarTabla();
    }
    
    
    public void cargarComboTipo(){
        
        List<Tipo> misTipos = unaControladoraVisual.mostrarTipos();
        
        for (Tipo unTipo : misTipos) {
            comboTipo.addElement(unTipo.getNombre());
        }
        
        cmbTipo.setModel(comboTipo);
        
    }
    
    
    private void cargarTabla() {
        try {
            
            //ACA LIMPIAMOS LA TABLA ANTES DE CARGARLA
            
            DefaultTableModel modelo2 = (DefaultTableModel) tblHabitacion.getModel(); //GENERO UN NUEVO TABLE MODEL.. AL CUAL LE ASIGNO EL MODELO DE LA TABLA QUE CARGAMOS 																			CON ANTERIORIDAD

            int filas = tblHabitacion.getRowCount(); ///GENERO UN INDICE PARA SABER CUANTAS FILAS TIENE MI TABLA

            for (int i = 0; i < filas; i++) {    ////RECORRO EL INDICE A TRAVES DE UN CICLO FOR

                modelo2.removeRow(0);   /////DE ESTA MANERA VOY QUITANDO EL SIEMPRE LA PRIMER FILA DEL MODELO...ESTO UNA VEZ FINALIZADO EL RECORRIDO DEL FOR NOS 								     ELIMINA TODOS LOS ELEMENTOS DE LA TABLA

            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "HA OCURRIDO UN ERROR" + ex);
        }

        //ACA LA CARGAMOS
        
        List<Habitacion> misHabitaciones = new LinkedList();
        
        try {
            
            misHabitaciones = unaControladoraVisual.mostrarHabitaciones(); ///CARGO EN UNA COLECCION LOS ELEMENTOS QUE DESEO CARGAR; EN ESTE CASO LOS TRAIGO DESDE LA CONTROLADORA 													    VISUAL
            
            Object[] fila = new Object[3];  ///GENERO UN VECTOR DE TIPO OBJECT DADO QUE EN EL VOY A CARGAR DISTINTOS TIPOS DE DATOS

            for (Habitacion unaHabitacion : misHabitaciones) { ///RECORRO LA LISTA UTILIZANDO UN FOR EACH
                
                ////AQUI LE ASIGNO A CADA ELEMENTO DE UN VECTOR LOS DATOS QUE QUIERO QUE SE MUESTREN
                fila[0] = unaHabitacion.getId();
                //fila[1] = unaHabitacion.getEstado();
                fila[1] = unaHabitacion.getMontoPorNoche();
                fila[2] = unaHabitacion.getUnTipo().getNombre();

                modelo.addRow(fila);  ////AGREGO A MI MODELO UNA FILA (ES IMPORTANTE SABER QUE CADA VECTOR ES UNA FILA DA LA TABLA)
                
            }
            

            tblHabitacion.setModel(modelo); ////UNA VEZ FINALIZADO LE ASIGNO A MI TABLA EL MODELO Y ESTO MOSTRARIA LOS DATOS 
            
            TableRowSorter <TableModel> ordenar = new TableRowSorter <TableModel> (modelo);
            tblHabitacion.setRowSorter(ordenar);
            
            //txtID.setText(null);
            //txtEstado.setText(null);
            txtMontoPorNoche.setText(null);
            
            
        } catch (Exception EX) {
            JOptionPane.showMessageDialog(null, "HA OCURRIDO UN ERROR" + EX);
        }
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnModificar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHabitacion = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtMontoPorNoche = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        cmbTipo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setClosable(true);

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        tblHabitacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Número", "Monto por Noche", "Tipo"
            }
        ));
        tblHabitacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHabitacionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHabitacion);

        jLabel4.setText("HABITACIONES");

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jLabel3.setText("Monto por Noche:");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Tipo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(btnCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMontoPorNoche, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBorrar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMontoPorNoche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancelar)
                            .addComponent(btnBorrar)
                            .addComponent(btnModificar)
                            .addComponent(btnAgregar))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
       
            /*
            int id = Integer.parseInt(txtID.getText());
            boolean estado = false; //txtEstado.getText();
            int montoPorNoche = Integer.parseInt(txtMontoPorNoche.getText());
            String tipo = (String)comboTipo.getSelectedItem();
            Tipo unTipo2 = null;
            
            Habitacion unaHabitacion = unaControladoraVisual.DameLaHabitacion(id);
            List <Tipo> misTipos = unaControladoraVisual.mostrarTipos();
            
            for (Tipo unTipo : misTipos) {
            if(unTipo.getNombre().equals(tipo)){
            unTipo2 = unTipo;
            }
            }
            
            try {
            unaControladoraVisual.modificarHabitacion(id, estado, montoPorNoche, unTipo2, unaHabitacion);
            } catch (Exception ex) {
            Logger.getLogger(ABMHabitacion.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            if(this.unVerificador.tablaSeleccionada(tblHabitacion)){
             try {
                int numero = Integer.parseInt(this.tblHabitacion.getValueAt(tblHabitacion.getSelectedRow(), 0).toString());
                int montoPorNoche = Integer.parseInt(this.txtMontoPorNoche.getText());
                String tipo = this.cmbTipo.getItemAt(this.cmbTipo.getSelectedIndex());
                this.unaControladoraVisual.modificarHabitacion(numero, montoPorNoche, tipo);
                } catch (Exception ex) {
                    Logger.getLogger(ABMHabitacion.class.getName()).log(Level.SEVERE, null, ex);
                }
                cargarTabla();
            }
            

    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        /*
        int id = Integer.parseInt(txtID.getText());

        Habitacion unaHabitacion = unaControladoraVisual.DameLaHabitacion(id);

        try {
            unaControladoraVisual.borrarHabitacion(unaHabitacion);
        } catch (Exception ex) {
            Logger.getLogger(ABMHabitacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        */
        if(this.unVerificador.tablaSeleccionada(tblHabitacion)){
            int numero = Integer.parseInt(tblHabitacion.getValueAt(tblHabitacion.getSelectedRow(), 0).toString());
            try {
                this.unaControladoraVisual.borrarHabitacion(numero);
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(ABMHabitacion.class.getName()).log(Level.SEVERE, null, ex);
            }
            cargarTabla();
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void tblHabitacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHabitacionMouseClicked
        //txtID.setText(tblHabitacion.getValueAt(tblHabitacion.getSelectedRow(), 0).toString());
        //txtEstado.setText(tblHabitacion.getValueAt(tblHabitacion.getSelectedRow(), 1).toString());
        txtMontoPorNoche.setText(tblHabitacion.getValueAt(tblHabitacion.getSelectedRow(), 1).toString());
        cmbTipo.setSelectedItem((String)tblHabitacion.getValueAt(tblHabitacion.getSelectedRow(), 2));
    }//GEN-LAST:event_tblHabitacionMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //txtID.setText(null);
        //txtEstado.setText(null);
        txtMontoPorNoche.setText(null);
        cargarTabla();
    }//GEN-LAST:event_btnCancelarActionPerformed

    public boolean campoVacio(){
        boolean vacio = false;
        if(this.txtMontoPorNoche.getText().equals("")!= true){
            vacio= true;
        }
    return vacio;  
    }
    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        /*
        int id = Integer.parseInt(txtID.getText());
        boolean estado = false; //txtEstado.getText();
        int montoPorNoche = Integer.parseInt(txtMontoPorNoche.getText());
        String tipo = (String)cmbTipo.getSelectedItem();
        Tipo unTipo2 = null;
        List <Tipo> misTipos = unaControladoraVisual.mostrarTipos();
        for (Tipo unTipo : misTipos) {
            if(unTipo.getNombre().equals(tipo)){
                unTipo2 = unTipo;
            }
        }
        try {
            unaControladoraVisual.altaHabitacion(id, estado, montoPorNoche, unTipo2);
        } catch (Exception ex) {
            Logger.getLogger(ABMHabitacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
        
        if(unVerificador.campoVacio(txtMontoPorNoche)&& unVerificador.datoNumerico(txtMontoPorNoche)){
            this.unaControladoraVisual.altaHabitacion(false, Integer.parseInt(this.txtMontoPorNoche.getText()), (String)this.comboTipo.getSelectedItem());
            cargarTabla();
        }
    }//GEN-LAST:event_btnAgregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHabitacion;
    private javax.swing.JTextField txtMontoPorNoche;
    // End of variables declaration//GEN-END:variables
}
